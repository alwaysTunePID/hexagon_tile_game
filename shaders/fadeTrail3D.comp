#version 430 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(rgba32f, binding = 0) uniform image3D psTexture;
layout(rgba32f, binding = 1) uniform image3D blurPsTexture;

uniform ivec3 textureRes;
uniform float deltaTime;

vec4 mixThreeColors(vec4 c1, vec4 c2, vec4 c3, float t) {
    if (t < 0.5) {
        return mix(c1, c2, t * 2.0);  // Blend between c1 and c2 for t in [0, 0.5]
    } else {
        return mix(c2, c3, (t - 0.5) * 2.0); // Blend between c2 and c3 for t in [0.5, 1.0]
    }
}

void main() {

    ivec3 coords = ivec3(gl_GlobalInvocationID.xyz);
    if (coords.x >= textureRes.x || coords.y >= textureRes.y || coords.z >= textureRes.z) return;

    // Configuration parameters
    float fadeTerm = 0.05;
    int enableMaxAlpha = 1;

    ivec3 diffCoords[7] = {
        ivec3(0, 0, 0),
        ivec3(1, 0, 0),
        ivec3(-1, 0, 0),
        ivec3(0, 1, 0),
        ivec3(0, -1, 0),
        ivec3(0, 0, 1),
        ivec3(0, 0, -1)
    };

    float alphaSum = 0.0;
    float weightSum = 0.0;
    float maxAlpha = 0.0;

    for (int i = 0; i < 7; i++) {
        ivec3 searchCoord = coords + diffCoords[i];
        // Check if the coordinates are within bounds
        if (searchCoord.x < 0 || searchCoord.y < 0 || searchCoord.z < 0) continue;
        if (searchCoord.x >= textureRes.x || searchCoord.y >= textureRes.y || searchCoord.z >= textureRes.z) continue;

        // Load the color from the neighboring pixel
        vec4 color = imageLoad(psTexture, searchCoord);
        // Temp, for black sphere
        if (i == 0 && color.r < 0.01 && color.g < 0.01 && color.b < 0.01 && color.a > 0.99) {
            imageStore(blurPsTexture, coords, color);
            return;
        }
        alphaSum += clamp(color.a, 0.0, 1.0); // Accumulate alpha values
        weightSum += 1.0; // Accumulate weights
        if (color.a > maxAlpha) {
            maxAlpha = color.a;
        }
    }

    vec3 finalRGB = vec3(1.0);
    float finalAlpha = 1.0;

    if (enableMaxAlpha == 1) {
        finalAlpha = maxAlpha * 0.85; // Use percentage of maximum alpha value from neighbors
    }
    else {
        // Temp
        float alphaConfig = 0.85; // 0.75; // For testing
        // Normalize alpha by total weight
        finalAlpha = (weightSum > 0.0) ? clamp(alphaConfig * alphaSum / weightSum, 0.0, 1.0) : 0.0;
        if (finalAlpha < 0.001)
            finalAlpha = 0.0; // Set alpha to 0 if below threshold

        vec4 orange = vec4(0.965, 0.627, 0.227, 1.0);
        vec4 yellow = vec4(0.988, 0.96, 0.345, 1.0);
        vec4 white  = vec4(1.0, 1.0, 1.0, 1.0);

        float colorMixPerc = clamp(finalAlpha * 10.0, 0.0, 1.0);;
        finalRGB = mixThreeColors(orange, yellow, white, colorMixPerc).rgb;
    }

    // Store the final blurred color
    imageStore(blurPsTexture, coords, vec4(finalRGB, finalAlpha));
}